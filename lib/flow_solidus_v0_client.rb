# Generated by apidoc - http://www.apidoc.me
# Service version: 0.0.3
# apidoc:0.11.33 http://www.apidoc.me/flow/solidus/0.0.3/ruby_client

require 'cgi'
require 'net/http'
require 'net/https'
require 'uri'
require 'base64'

require 'date'
require 'rubygems'
require 'json'
require 'bigdecimal'

# Auth: add api key in header named 'X-Spree-Token'
module Io
  module Flow
    module Solidus
      module V0

        class Client

          module Constants

            BASE_URL = 'https://flow-solidus.herokuapp.com/api' unless defined?(Constants::BASE_URL)
            NAMESPACE = 'io.flow.solidus.v0' unless defined?(Constants::NAMESPACE)
            USER_AGENT = 'apidoc:0.11.33 http://www.apidoc.me/flow/solidus/0.0.3/ruby_client' unless defined?(Constants::USER_AGENT)
            VERSION = '0.0.3' unless defined?(Constants::VERSION)
            VERSION_MAJOR = 0 unless defined?(VERSION_MAJOR)

          end

          attr_reader :url

          def initialize(url, opts={})
            @url = HttpClient::Preconditions.assert_class('url', url, String)
            @authorization = HttpClient::Preconditions.assert_class_or_nil('authorization', opts.delete(:authorization), HttpClient::Authorization)
            @default_headers = HttpClient::Preconditions.assert_class('default_headers', opts.delete(:default_headers) || {}, Hash)
            HttpClient::Preconditions.assert_empty_opts(opts)
            HttpClient::Preconditions.check_state(url.match(/http.+/i), "URL[%s] must start with http" % url)
          end

          # Creates an instance of the client using the base url specified in the API spec.
          def Client.at_base_url(opts={})
            Client.new(Constants::BASE_URL, opts)
          end

          def request(path=nil)
            HttpClient::Preconditions.assert_class_or_nil('path', path, String)
            request = HttpClient::Request.new(URI.parse(@url + path.to_s)).with_header('User-Agent', Constants::USER_AGENT).with_header('X-Apidoc-Version', Constants::VERSION).with_header('X-Apidoc-Version-Major', Constants::VERSION_MAJOR)

            @default_headers.each do |key, value|
              request = request.with_header(key, value)
            end

            if @authorization
              request = request.with_auth(@authorization)
            end

            request
          end

          def products
            @products ||= ::Io::Flow::Solidus::V0::Clients::Products.new(self)
          end

          def taxons
            @taxons ||= ::Io::Flow::Solidus::V0::Clients::Taxons.new(self)
          end

          def taxonomies
            @taxonomies ||= ::Io::Flow::Solidus::V0::Clients::Taxonomies.new(self)
          end

          def variants
            @variants ||= ::Io::Flow::Solidus::V0::Clients::Variants.new(self)
          end
        end

        module Clients

          class Products

            def initialize(client)
              @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::Solidus::V0::Client)
            end

            def get(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              query = {
                :page => HttpClient::Preconditions.assert_class('page', (x = opts.delete(:page); x.nil? ? 1 : x), Integer)
              }.delete_if { |k, v| v.nil? }
              r = @client.request("/products").with_query(query).get
              ::Io::Flow::Solidus::V0::Models::ResponseProducts.new(r)
            end

            def get_by_id(id)
              HttpClient::Preconditions.assert_class('id', id, Integer)
              r = @client.request("/products/#{id}").get
              ::Io::Flow::Solidus::V0::Models::Product.new(r)
            end

            def post(product_request_form)
              HttpClient::Preconditions.assert_class('product_request_form', product_request_form, ::Io::Flow::Solidus::V0::Models::ProductRequestForm)
              r = @client.request("/products").with_json(product_request_form.to_json).post
              ::Io::Flow::Solidus::V0::Models::Product.new(r)
            end

            def delete_by_id(id)
              HttpClient::Preconditions.assert_class('id', id, Integer)
              r = @client.request("/products/#{id}").delete
              nil
            end

            def post_variants_by_product_slug(product_slug, variant_request_form)
              HttpClient::Preconditions.assert_class('product_slug', product_slug, String)
              HttpClient::Preconditions.assert_class('variant_request_form', variant_request_form, ::Io::Flow::Solidus::V0::Models::VariantRequestForm)
              r = @client.request("/products/#{CGI.escape(product_slug)}/variants").with_json(variant_request_form.to_json).post
              ::Io::Flow::Solidus::V0::Models::Variant.new(r)
            end

            def put_variants_by_product_slug_and_sku(product_slug, sku, variant_request_form)
              HttpClient::Preconditions.assert_class('product_slug', product_slug, String)
              HttpClient::Preconditions.assert_class('sku', sku, String)
              HttpClient::Preconditions.assert_class('variant_request_form', variant_request_form, ::Io::Flow::Solidus::V0::Models::VariantRequestForm)
              r = @client.request("/products/#{CGI.escape(product_slug)}/variants/#{CGI.escape(sku)}").with_json(variant_request_form.to_json).put
              ::Io::Flow::Solidus::V0::Models::Variant.new(r)
            end

            def delete_variants_by_product_slug_and_sku(product_slug, sku)
              HttpClient::Preconditions.assert_class('product_slug', product_slug, String)
              HttpClient::Preconditions.assert_class('sku', sku, String)
              r = @client.request("/products/#{CGI.escape(product_slug)}/variants/#{CGI.escape(sku)}").delete
              nil
            end

          end

          class Taxons

            def initialize(client)
              @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::Solidus::V0::Client)
            end

            def get(taxonomy_id, incoming={})
              HttpClient::Preconditions.assert_class('taxonomy_id', taxonomy_id, Integer)
              opts = HttpClient::Helper.symbolize_keys(incoming)
              query = {
                :page => HttpClient::Preconditions.assert_class('page', (x = opts.delete(:page); x.nil? ? 1 : x), Integer)
              }.delete_if { |k, v| v.nil? }
              r = @client.request("/taxonomies/#{taxonomy_id}/taxons").with_query(query).get
              ::Io::Flow::Solidus::V0::Models::ResponseTaxons.new(r)
            end

            def get_by_id(taxonomy_id, id)
              HttpClient::Preconditions.assert_class('taxonomy_id', taxonomy_id, Integer)
              HttpClient::Preconditions.assert_class('id', id, Integer)
              r = @client.request("/taxonomies/#{taxonomy_id}/taxons/#{id}").get
              ::Io::Flow::Solidus::V0::Models::Taxon.new(r)
            end

            def post(taxonomy_id, taxon_form)
              HttpClient::Preconditions.assert_class('taxonomy_id', taxonomy_id, Integer)
              HttpClient::Preconditions.assert_class('taxon_form', taxon_form, ::Io::Flow::Solidus::V0::Models::TaxonForm)
              r = @client.request("/taxonomies/#{taxonomy_id}/taxons").with_json(taxon_form.to_json).post
              ::Io::Flow::Solidus::V0::Models::Taxon.new(r)
            end

            def delete_by_id(taxonomy_id, id)
              HttpClient::Preconditions.assert_class('taxonomy_id', taxonomy_id, Integer)
              HttpClient::Preconditions.assert_class('id', id, Integer)
              r = @client.request("/taxonomies/#{taxonomy_id}/taxons/#{id}").delete
              nil
            end

          end

          class Taxonomies

            def initialize(client)
              @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::Solidus::V0::Client)
            end

            def get(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              query = {
                :page => HttpClient::Preconditions.assert_class('page', (x = opts.delete(:page); x.nil? ? 1 : x), Integer)
              }.delete_if { |k, v| v.nil? }
              r = @client.request("/taxonomies").with_query(query).get
              ::Io::Flow::Solidus::V0::Models::ResponseTaxonomies.new(r)
            end

            def get_by_id(id)
              HttpClient::Preconditions.assert_class('id', id, Integer)
              r = @client.request("/taxonomies/#{id}").get
              ::Io::Flow::Solidus::V0::Models::Taxonomy.new(r)
            end

            def post(taxonomy_form)
              HttpClient::Preconditions.assert_class('taxonomy_form', taxonomy_form, ::Io::Flow::Solidus::V0::Models::TaxonomyForm)
              r = @client.request("/taxonomies").with_json(taxonomy_form.to_json).post
              ::Io::Flow::Solidus::V0::Models::Taxonomy.new(r)
            end

            def delete_by_id(id)
              HttpClient::Preconditions.assert_class('id', id, Integer)
              r = @client.request("/taxonomies/#{id}").delete
              nil
            end

          end

          class Variants

            def initialize(client)
              @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::Solidus::V0::Client)
            end

            def get(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              query = {
                :product_id => (x = opts.delete(:product_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('product_id', x, Integer)),
                :page => HttpClient::Preconditions.assert_class('page', (x = opts.delete(:page); x.nil? ? 1 : x), Integer)
              }.delete_if { |k, v| v.nil? }
              r = @client.request("/variants").with_query(query).get
              ::Io::Flow::Solidus::V0::Models::ResponseVariants.new(r)
            end

          end

        end

        module Models

          class Example

            attr_reader :value

            def initialize(value)
              @value = HttpClient::Preconditions.assert_class('value', value, String)
            end

            # Returns the instance of Example for this value, creating a new instance for an unknown value
            def Example.apply(value)
              if value.instance_of?(Example)
                value
              else
                HttpClient::Preconditions.assert_class_or_nil('value', value, String)
                value.nil? ? nil : (from_string(value) || Example.new(value))
              end
            end

            # Returns the instance of Example for this value, or nil if not found
            def Example.from_string(value)
              HttpClient::Preconditions.assert_class('value', value, String)
              Example.ALL.find { |v| v.value == value }
            end

            def Example.ALL
              @@all ||= [Example.manual]
            end

            def Example.manual
              @@_manual ||= Example.new('manual')
            end

            def to_hash
              value
            end

          end

          class Error

            attr_reader :error, :errors

            def initialize(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              HttpClient::Preconditions.require_keys(opts, [:error], 'Error')
              @error = HttpClient::Preconditions.assert_class('error', opts.delete(:error), String)
              @errors = (x = opts.delete(:errors); x.nil? ? nil : HttpClient::Preconditions.assert_class('errors', x, Array).map { |v| HttpClient::Preconditions.assert_class('errors', v, String) })
            end

            def to_json
              JSON.dump(to_hash)
            end

            def copy(incoming={})
              Error.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
            end

            def to_hash
              {
                :error => error,
                :errors => errors.nil? ? nil : errors
              }
            end

          end

          class Option

            attr_reader :name, :value

            def initialize(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              HttpClient::Preconditions.require_keys(opts, [:name, :value], 'Option')
              @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
              @value = HttpClient::Preconditions.assert_class('value', opts.delete(:value), String)
            end

            def to_json
              JSON.dump(to_hash)
            end

            def copy(incoming={})
              Option.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
            end

            def to_hash
              {
                :name => name,
                :value => value
              }
            end

          end

          class OptionValue

            attr_reader :id, :name, :presentation, :option_type_id, :option_type_name, :option_type_presentation

            def initialize(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              HttpClient::Preconditions.require_keys(opts, [:id, :name, :presentation, :option_type_id, :option_type_name, :option_type_presentation], 'OptionValue')
              @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), Integer)
              @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
              @presentation = HttpClient::Preconditions.assert_class('presentation', opts.delete(:presentation), String)
              @option_type_id = HttpClient::Preconditions.assert_class('option_type_id', opts.delete(:option_type_id), Integer)
              @option_type_name = HttpClient::Preconditions.assert_class('option_type_name', opts.delete(:option_type_name), String)
              @option_type_presentation = HttpClient::Preconditions.assert_class('option_type_presentation', opts.delete(:option_type_presentation), String)
            end

            def to_json
              JSON.dump(to_hash)
            end

            def copy(incoming={})
              OptionValue.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
            end

            def to_hash
              {
                :id => id,
                :name => name,
                :presentation => presentation,
                :option_type_id => option_type_id,
                :option_type_name => option_type_name,
                :option_type_presentation => option_type_presentation
              }
            end

          end

          class Product

            attr_reader :id, :name, :description, :price, :display_price, :available_on, :slug, :taxon_ids, :shipping_category_id, :total_on_hand, :variants

            def initialize(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              HttpClient::Preconditions.require_keys(opts, [:id, :name, :price, :display_price, :available_on, :slug, :taxon_ids, :shipping_category_id, :total_on_hand], 'Product')
              @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), Integer)
              @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
              @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
              @price = HttpClient::Preconditions.assert_class('price', HttpClient::Helper.to_big_decimal(opts.delete(:price)), BigDecimal)
              @display_price = HttpClient::Preconditions.assert_class('display_price', HttpClient::Helper.to_big_decimal(opts.delete(:display_price)), BigDecimal)
              @available_on = HttpClient::Preconditions.assert_class('available_on', HttpClient::Helper.to_date_time_iso8601(opts.delete(:available_on)), DateTime)
              @slug = HttpClient::Preconditions.assert_class('slug', opts.delete(:slug), String)
              @taxon_ids = HttpClient::Preconditions.assert_class('taxon_ids', opts.delete(:taxon_ids), Array).map { |v| HttpClient::Preconditions.assert_class('taxon_ids', v, Integer) }
              @shipping_category_id = HttpClient::Preconditions.assert_class('shipping_category_id', opts.delete(:shipping_category_id), Integer)
              @total_on_hand = HttpClient::Preconditions.assert_class('total_on_hand', opts.delete(:total_on_hand), Integer)
              @variants = HttpClient::Preconditions.assert_class('variants', (x = opts.delete(:variants); x.nil? ? [] : x), Array).map { |v| (x = v; x.is_a?(::Io::Flow::Solidus::V0::Models::Variant) ? x : ::Io::Flow::Solidus::V0::Models::Variant.new(x)) }
            end

            def to_json
              JSON.dump(to_hash)
            end

            def copy(incoming={})
              Product.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
            end

            def to_hash
              {
                :id => id,
                :name => name,
                :description => description,
                :price => price,
                :display_price => display_price,
                :available_on => available_on,
                :slug => slug,
                :taxon_ids => taxon_ids,
                :shipping_category_id => shipping_category_id,
                :total_on_hand => total_on_hand,
                :variants => variants.map { |o| o.to_hash }
              }
            end

          end

          class ProductForm

            attr_reader :name, :description, :price, :available_on, :taxon_ids, :shipping_category_id, :total_on_hand

            def initialize(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              HttpClient::Preconditions.require_keys(opts, [:name, :price, :taxon_ids, :shipping_category_id], 'ProductForm')
              @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
              @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
              @price = HttpClient::Preconditions.assert_class('price', HttpClient::Helper.to_big_decimal(opts.delete(:price)), BigDecimal)
              @available_on = (x = opts.delete(:available_on); x.nil? ? nil : HttpClient::Preconditions.assert_class('available_on', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
              @taxon_ids = HttpClient::Preconditions.assert_class('taxon_ids', opts.delete(:taxon_ids), Array).map { |v| HttpClient::Preconditions.assert_class('taxon_ids', v, Integer) }
              @shipping_category_id = HttpClient::Preconditions.assert_class('shipping_category_id', opts.delete(:shipping_category_id), Integer)
              @total_on_hand = HttpClient::Preconditions.assert_class('total_on_hand', (x = opts.delete(:total_on_hand); x.nil? ? 0 : x), Integer)
            end

            def to_json
              JSON.dump(to_hash)
            end

            def copy(incoming={})
              ProductForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
            end

            def to_hash
              {
                :name => name,
                :description => description,
                :price => price,
                :available_on => available_on,
                :taxon_ids => taxon_ids,
                :shipping_category_id => shipping_category_id,
                :total_on_hand => total_on_hand
              }
            end

          end

          class ProductRequestForm

            attr_reader :product

            def initialize(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              HttpClient::Preconditions.require_keys(opts, [:product], 'ProductRequestForm')
              @product = (x = opts.delete(:product); x.is_a?(::Io::Flow::Solidus::V0::Models::ProductForm) ? x : ::Io::Flow::Solidus::V0::Models::ProductForm.new(x))
            end

            def to_json
              JSON.dump(to_hash)
            end

            def copy(incoming={})
              ProductRequestForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
            end

            def to_hash
              {
                :product => product.to_hash
              }
            end

          end

          class ResponseProducts

            attr_reader :products, :count, :current_page, :pages

            def initialize(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              HttpClient::Preconditions.require_keys(opts, [:products, :count, :current_page, :pages], 'ResponseProducts')
              @products = HttpClient::Preconditions.assert_class('products', opts.delete(:products), Array).map { |v| (x = v; x.is_a?(::Io::Flow::Solidus::V0::Models::Product) ? x : ::Io::Flow::Solidus::V0::Models::Product.new(x)) }
              @count = HttpClient::Preconditions.assert_class('count', opts.delete(:count), Integer)
              @current_page = HttpClient::Preconditions.assert_class('current_page', opts.delete(:current_page), String)
              @pages = HttpClient::Preconditions.assert_class('pages', opts.delete(:pages), Integer)
            end

            def to_json
              JSON.dump(to_hash)
            end

            def copy(incoming={})
              ResponseProducts.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
            end

            def to_hash
              {
                :products => products.map { |o| o.to_hash },
                :count => count,
                :current_page => current_page,
                :pages => pages
              }
            end

          end

          class ResponseTaxonomies

            attr_reader :taxonomies, :count, :current_page, :pages

            def initialize(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              HttpClient::Preconditions.require_keys(opts, [:taxonomies, :count, :current_page, :pages], 'ResponseTaxonomies')
              @taxonomies = HttpClient::Preconditions.assert_class('taxonomies', opts.delete(:taxonomies), Array).map { |v| (x = v; x.is_a?(::Io::Flow::Solidus::V0::Models::Taxonomy) ? x : ::Io::Flow::Solidus::V0::Models::Taxonomy.new(x)) }
              @count = HttpClient::Preconditions.assert_class('count', opts.delete(:count), Integer)
              @current_page = HttpClient::Preconditions.assert_class('current_page', opts.delete(:current_page), String)
              @pages = HttpClient::Preconditions.assert_class('pages', opts.delete(:pages), Integer)
            end

            def to_json
              JSON.dump(to_hash)
            end

            def copy(incoming={})
              ResponseTaxonomies.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
            end

            def to_hash
              {
                :taxonomies => taxonomies.map { |o| o.to_hash },
                :count => count,
                :current_page => current_page,
                :pages => pages
              }
            end

          end

          class ResponseTaxons

            attr_reader :taxons, :count, :current_page, :pages

            def initialize(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              HttpClient::Preconditions.require_keys(opts, [:taxons, :count, :current_page, :pages], 'ResponseTaxons')
              @taxons = HttpClient::Preconditions.assert_class('taxons', opts.delete(:taxons), Array).map { |v| (x = v; x.is_a?(::Io::Flow::Solidus::V0::Models::Taxon) ? x : ::Io::Flow::Solidus::V0::Models::Taxon.new(x)) }
              @count = HttpClient::Preconditions.assert_class('count', opts.delete(:count), Integer)
              @current_page = HttpClient::Preconditions.assert_class('current_page', opts.delete(:current_page), Integer)
              @pages = HttpClient::Preconditions.assert_class('pages', opts.delete(:pages), Integer)
            end

            def to_json
              JSON.dump(to_hash)
            end

            def copy(incoming={})
              ResponseTaxons.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
            end

            def to_hash
              {
                :taxons => taxons.map { |o| o.to_hash },
                :count => count,
                :current_page => current_page,
                :pages => pages
              }
            end

          end

          class ResponseVariants

            attr_reader :variants, :count, :current_page, :pages

            def initialize(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              HttpClient::Preconditions.require_keys(opts, [:variants, :count, :current_page, :pages], 'ResponseVariants')
              @variants = HttpClient::Preconditions.assert_class('variants', opts.delete(:variants), Array).map { |v| (x = v; x.is_a?(::Io::Flow::Solidus::V0::Models::Variant) ? x : ::Io::Flow::Solidus::V0::Models::Variant.new(x)) }
              @count = HttpClient::Preconditions.assert_class('count', opts.delete(:count), Integer)
              @current_page = HttpClient::Preconditions.assert_class('current_page', opts.delete(:current_page), Integer)
              @pages = HttpClient::Preconditions.assert_class('pages', opts.delete(:pages), Integer)
            end

            def to_json
              JSON.dump(to_hash)
            end

            def copy(incoming={})
              ResponseVariants.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
            end

            def to_hash
              {
                :variants => variants.map { |o| o.to_hash },
                :count => count,
                :current_page => current_page,
                :pages => pages
              }
            end

          end

          class Taxon

            attr_reader :id, :name

            def initialize(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              HttpClient::Preconditions.require_keys(opts, [:id, :name], 'Taxon')
              @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), Integer)
              @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            end

            def to_json
              JSON.dump(to_hash)
            end

            def copy(incoming={})
              Taxon.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
            end

            def to_hash
              {
                :id => id,
                :name => name
              }
            end

          end

          class TaxonForm

            attr_reader :name

            def initialize(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              HttpClient::Preconditions.require_keys(opts, [:name], 'TaxonForm')
              @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            end

            def to_json
              JSON.dump(to_hash)
            end

            def copy(incoming={})
              TaxonForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
            end

            def to_hash
              {
                :name => name
              }
            end

          end

          class Taxonomy

            attr_reader :id, :name

            def initialize(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              HttpClient::Preconditions.require_keys(opts, [:id, :name], 'Taxonomy')
              @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), Integer)
              @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            end

            def to_json
              JSON.dump(to_hash)
            end

            def copy(incoming={})
              Taxonomy.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
            end

            def to_hash
              {
                :id => id,
                :name => name
              }
            end

          end

          class TaxonomyForm

            attr_reader :name

            def initialize(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              HttpClient::Preconditions.require_keys(opts, [:name], 'TaxonomyForm')
              @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            end

            def to_json
              JSON.dump(to_hash)
            end

            def copy(incoming={})
              TaxonomyForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
            end

            def to_hash
              {
                :name => name
              }
            end

          end

          class Variant

            attr_reader :sku, :price, :cost_price, :is_master, :in_stock, :total_on_hand, :option_values, :height, :width, :depth

            def initialize(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              HttpClient::Preconditions.require_keys(opts, [:sku, :price, :cost_price, :is_master, :in_stock, :total_on_hand], 'Variant')
              @sku = HttpClient::Preconditions.assert_class('sku', opts.delete(:sku), String)
              @price = HttpClient::Preconditions.assert_class('price', HttpClient::Helper.to_big_decimal(opts.delete(:price)), BigDecimal)
              @cost_price = HttpClient::Preconditions.assert_class('cost_price', HttpClient::Helper.to_big_decimal(opts.delete(:cost_price)), BigDecimal)
              @is_master = HttpClient::Preconditions.assert_boolean('is_master', opts.delete(:is_master))
              @in_stock = HttpClient::Preconditions.assert_boolean('in_stock', opts.delete(:in_stock))
              @total_on_hand = HttpClient::Preconditions.assert_class('total_on_hand', opts.delete(:total_on_hand), Integer)
              @option_values = (x = opts.delete(:option_values); x.nil? ? nil : HttpClient::Preconditions.assert_class('option_values', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::Solidus::V0::Models::OptionValue) ? x : ::Io::Flow::Solidus::V0::Models::OptionValue.new(x)) })
              @height = (x = opts.delete(:height); x.nil? ? nil : HttpClient::Preconditions.assert_class('height', x, String))
              @width = (x = opts.delete(:width); x.nil? ? nil : HttpClient::Preconditions.assert_class('width', x, String))
              @depth = (x = opts.delete(:depth); x.nil? ? nil : HttpClient::Preconditions.assert_class('depth', x, String))
            end

            def to_json
              JSON.dump(to_hash)
            end

            def copy(incoming={})
              Variant.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
            end

            def to_hash
              {
                :sku => sku,
                :price => price,
                :cost_price => cost_price,
                :is_master => is_master,
                :in_stock => in_stock,
                :total_on_hand => total_on_hand,
                :option_values => option_values.nil? ? nil : option_values.map { |o| o.to_hash },
                :height => height,
                :width => width,
                :depth => depth
              }
            end

          end

          class VariantForm

            attr_reader :sku, :price, :cost_price, :is_master, :options, :height, :width, :depth

            def initialize(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              HttpClient::Preconditions.require_keys(opts, [:sku, :price, :cost_price, :is_master], 'VariantForm')
              @sku = HttpClient::Preconditions.assert_class('sku', opts.delete(:sku), String)
              @price = HttpClient::Preconditions.assert_class('price', HttpClient::Helper.to_big_decimal(opts.delete(:price)), BigDecimal)
              @cost_price = HttpClient::Preconditions.assert_class('cost_price', HttpClient::Helper.to_big_decimal(opts.delete(:cost_price)), BigDecimal)
              @is_master = HttpClient::Preconditions.assert_boolean('is_master', opts.delete(:is_master))
              @options = (x = opts.delete(:options); x.nil? ? nil : HttpClient::Preconditions.assert_class('options', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::Solidus::V0::Models::Option) ? x : ::Io::Flow::Solidus::V0::Models::Option.new(x)) })
              @height = (x = opts.delete(:height); x.nil? ? nil : HttpClient::Preconditions.assert_class('height', x, String))
              @width = (x = opts.delete(:width); x.nil? ? nil : HttpClient::Preconditions.assert_class('width', x, String))
              @depth = (x = opts.delete(:depth); x.nil? ? nil : HttpClient::Preconditions.assert_class('depth', x, String))
            end

            def to_json
              JSON.dump(to_hash)
            end

            def copy(incoming={})
              VariantForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
            end

            def to_hash
              {
                :sku => sku,
                :price => price,
                :cost_price => cost_price,
                :is_master => is_master,
                :options => options.nil? ? nil : options.map { |o| o.to_hash },
                :height => height,
                :width => width,
                :depth => depth
              }
            end

          end

          class VariantRequestForm

            attr_reader :variant

            def initialize(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              HttpClient::Preconditions.require_keys(opts, [:variant], 'VariantRequestForm')
              @variant = (x = opts.delete(:variant); x.is_a?(::Io::Flow::Solidus::V0::Models::VariantForm) ? x : ::Io::Flow::Solidus::V0::Models::VariantForm.new(x))
            end

            def to_json
              JSON.dump(to_hash)
            end

            def copy(incoming={})
              VariantRequestForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
            end

            def to_hash
              {
                :variant => variant.to_hash
              }
            end

          end

        end

        # ===== END OF SERVICE DEFINITION =====
        module HttpClient

          class Request

            def initialize(uri)
              @uri = Preconditions.assert_class('uri', uri, URI)
              @params = nil
              @body = nil
              @auth = nil
              @headers = {}
              @header_keys_lower_case = []
            end

            def with_header(name, value)
              Preconditions.check_not_blank('name', name, "Header name is required")
              Preconditions.check_not_blank('value', value, "Header value is required")
              Preconditions.check_state(!@headers.has_key?(name),
                                        "Duplicate header named[%s]" % name)
              @headers[name] = value
              @header_keys_lower_case << name.downcase
              self
            end

            def with_auth(auth)
              Preconditions.assert_class('auth', auth, HttpClient::Authorization)
              Preconditions.check_state(@auth.nil?, "auth previously set")

              if auth.scheme.name == AuthScheme::BASIC.name
                @auth = auth
              else
                raise "Auth Scheme[#{auth.scheme.name}] not supported"
              end
              self
            end

            def with_query(params)
              Preconditions.assert_class('params', params, Hash)
              Preconditions.check_state(@params.nil?, "Already have query parameters")
              @params = params
              self
            end

            # Wrapper to set Content-Type header to application/json and set
            # the provided json document as the body
            def with_json(json)
              @headers['Content-Type'] ||= 'application/json; charset=UTF-8'
              with_body(json)
            end

            def with_body(body)
              Preconditions.check_not_blank('body', body)
              @body = body
              self
            end

            # Creates a new Net:HTTP client. The client returned should be
            # fully configured to make a request.
            def new_http_client
              client = Net::HTTP.new(@uri.host, @uri.port)
              if @uri.scheme == "https"
                configure_ssl(client)
              end
              client
            end

            # If HTTPS is required, this method accepts an HTTP Client and configures SSL
            def configure_ssl(http)
              Preconditions.assert_class('http', http, Net::HTTP)
              http.use_ssl = true
              http.verify_mode = OpenSSL::SSL::VERIFY_PEER
              http.cert_store = OpenSSL::X509::Store.new
              http.cert_store.set_default_paths
            end

            def get(&block)
              do_request(Net::HTTP::Get, &block)
            end

            def delete(&block)
              do_request(Net::HTTP::Delete, &block)
            end

            def options(&block)
              do_request(Net::HTTP::Options, &block)
            end

            def post(&block)
              do_request(Net::HTTP::Post, &block)
            end

            def put(&block)
              do_request(Net::HTTP::Put, &block)
            end

            class PATCH < Net::HTTP::Put
              METHOD = "PATCH"
            end

            def patch(&block)
              do_request(PATCH, &block)
            end

            def do_request(klass)
              Preconditions.assert_class('klass', klass, Class)

              uri = @uri.to_s
              if q = to_query(@params)
                uri += "?%s" % q
              end

              request = klass.send(:new, uri)

              curl = ['curl']
              if klass != Net::HTTP::Get
                curl << "-X%s" % klass.name.split("::").last.upcase
              end

              if @body
                # DEBUG path = "/tmp/rest_client.tmp"
                # DEBUG File.open(path, "w") { |os| os << @body.to_s }
                # DEBUG curl << "-d@%s" % path
                request.body = @body
              end

              if @auth
                curl << "-u \"%s:%s\"" % [@auth.username, @auth.password]
                Preconditions.check_state(!@header_keys_lower_case.include?("authorization"),
                                          "Cannot specify both an Authorization header and an auth instance")
                user_pass = "%s:%s" % [@auth.username, @auth.password]
                encoded = Base64.encode64(user_pass).to_s.split("\n").map(&:strip).join
                request.add_field("Authorization", "Basic %s" % encoded)
              end

              @headers.each { |key, value|
                curl <<  "-H \"%s: %s\"" % [key, value]
                request.add_field(key, value)
              }

              curl << "'%s'" % uri
              # DEBUG puts curl.join(" ")

              raw_response = http_request(request)
              response = raw_response.to_s == "" ? nil : JSON.parse(raw_response)

              if block_given?
                yield response
              else
                response
              end
            end

            private
            def to_query(params={})
              parts = (params || {}).map { |k,v|
                if v.respond_to?(:each)
                  v.map { |el| "%s=%s" % [k, CGI.escape(el.to_s)] }
                else
                  "%s=%s" % [k, CGI.escape(v.to_s)]
                end
              }
              parts.empty? ? nil : parts.join("&")
            end

            def http_request(request)
              response = begin
                           new_http_client.request(request)
                         rescue SocketError => e
                           raise Exception.new("Error accessing uri[#{@uri}]: #{e}")
                         end

              case response
              when Net::HTTPSuccess
                response.body
              else
                body = response.body rescue nil
                raise HttpClient::ServerError.new(response.code.to_i, response.message, :body => body, :uri => @uri.to_s)
              end
            end
          end

          class ServerError < StandardError

            attr_reader :code, :details, :body, :uri

            def initialize(code, details, incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              @code = HttpClient::Preconditions.assert_class('code', code, Integer)
              @details = HttpClient::Preconditions.assert_class('details', details, String)
              @body = HttpClient::Preconditions.assert_class_or_nil('body', opts.delete(:body), String)
              @uri = HttpClient::Preconditions.assert_class_or_nil('uri', opts.delete(:uri), String)
              HttpClient::Preconditions.assert_empty_opts(opts)
              super(self.message)
            end

            def message
              m = "%s %s" % [@code, @details]
              if @body
                m << ": %s" % @body
              end
              m
            end

            def body_json
              JSON.parse(@body)
            end

          end

          class PreconditionException < Exception

            attr_reader :message

            def initialize(message)
              super(message)
              @message = message
            end

          end

          module Preconditions

            def Preconditions.check_argument(expression, error_message=nil)
              if !expression
                raise PreconditionException.new(error_message || "check_argument failed")
              end
              nil
            end

            def Preconditions.check_state(expression, error_message=nil)
              if !expression
                raise PreconditionException.new(error_message || "check_state failed")
              end
              nil
            end

            def Preconditions.check_not_nil(field_name, reference, error_message=nil)
              if reference.nil?
                raise PreconditionException.new(error_message || "argument for %s cannot be nil" % field_name)
              end
              reference
            end

            def Preconditions.check_not_blank(field_name, reference, error_message=nil)
              if reference.to_s.strip == ""
                raise PreconditionException.new(error_message || "argument for %s cannot be blank" % field_name)
              end
              reference
            end

            # Throws an error if opts is not empty. Useful when parsing
            # arguments to a function
            def Preconditions.assert_empty_opts(opts)
              if !opts.empty?
                raise PreconditionException.new("Invalid opts: #{opts.keys.inspect}\n#{opts.inspect}")
              end
            end

            # Requires that the provided hash has the specified keys.
            # @param fields A list of symbols
            def Preconditions.require_keys(hash, fields, error_prefix=nil)
              missing = fields.select { |f| !hash.has_key?(f) }
              if !missing.empty?
                msg = "Missing required fields: " + missing.join(", ")
                raise PreconditionException.new(error_prefix.empty? ? msg : "#{error_prefix}: #{msg}")
              end
            end

            # Asserts that value is not nill and is_?(klass). Returns
            # value. Common use is
            #
            # amount = Preconditions.assert_class('amount', amount, BigDecimal)
            def Preconditions.assert_class(field_name, value, klass)
              Preconditions.check_not_nil('field_name', field_name)
              Preconditions.check_not_nil('klass', klass)
              Preconditions.check_not_nil('value', value, "Value for %s cannot be nil. Expected an instance of class %s" % [field_name, klass.name])
              Preconditions.check_state(value.is_a?(klass),
                                        "Value for #{field_name} is of type[#{value.class}] - class[#{klass}] is required. value[#{value.inspect.to_s}]")
              value
            end

            def Preconditions.assert_class_or_nil(field_name, value, klass)
              if !value.nil?
                Preconditions.assert_class(field_name, value, klass)
              end
            end

            def Preconditions.assert_boolean(field_name, value)
              Preconditions.check_not_nil('field_name', field_name)
              Preconditions.check_not_nil('value', value, "Value for %s cannot be nil. Expected an instance of TrueClass or FalseClass" % field_name)
              Preconditions.check_state(value.is_a?(TrueClass) || value.is_a?(FalseClass),
                                        "Value for #{field_name} is of type[#{value.class}] - class[TrueClass or FalseClass] is required. value[#{value.inspect.to_s}]")
              value
            end

            def Preconditions.assert_boolean_or_nil(field_name, value)
              if !value.nil?
                Preconditions.assert_boolean(field_name, value)
              end
            end

            def Preconditions.assert_collection_of_class(field_name, values, klass)
              Preconditions.assert_class(field_name, values, Array)
              values.each { |v| Preconditions.assert_class(field_name, v, klass) }
            end

            def Preconditions.assert_hash_of_class(field_name, hash, klass)
              Preconditions.assert_class(field_name, hash, Hash)
              values.each { |k, v| Preconditions.assert_class(field_name, v, klass) }
            end

          end

          class AuthScheme

            attr_reader :name

            def initialize(name)
              @name = HttpClient::Preconditions.check_not_blank('name', name)
            end

            BASIC = AuthScheme.new("basic") unless defined?(BASIC)

          end

          class Authorization

            attr_reader :scheme, :username, :password

            def initialize(scheme, username, opts={})
              @scheme = HttpClient::Preconditions.assert_class('schema', scheme, AuthScheme)
              @username = HttpClient::Preconditions.check_not_blank('username', username, "username is required")
              @password = HttpClient::Preconditions.assert_class_or_nil('password', opts.delete(:password), String)
              HttpClient::Preconditions.assert_empty_opts(opts)
            end

            def Authorization.basic(username, password=nil)
              Authorization.new(AuthScheme::BASIC, username, :password => password)
            end

          end

          module Helper

            def Helper.symbolize_keys(hash)
              Preconditions.assert_class('hash', hash, Hash)
              new_hash = {}
              hash.each { |k, v|
                new_hash[k.to_sym] = v
              }
              new_hash
            end

            def Helper.to_big_decimal(value)
              value ? BigDecimal.new(value.to_s) : nil
            end

            def Helper.to_object(value)
              value ? JSON.parse(value) : nil
            end

            def Helper.to_uuid(value)
              Preconditions.check_state(value.nil? || value.match(/^\w\w\w\w\w\w\w\w\-\w\w\w\w\-\w\w\w\w\-\w\w\w\w\-\w\w\w\w\w\w\w\w\w\w\w\w$/),
                                        "Invalid guid[%s]" % value)
              value
            end

            def Helper.to_date_iso8601(value)
              if value.is_a?(Date)
                value
              elsif value
                Date.parse(value.to_s)
              else
                nil
              end
            end

            def Helper.to_date_time_iso8601(value)
              if value.is_a?(DateTime)
                value
              elsif value
                DateTime.parse(value.to_s)
              else
                nil
              end
            end

            def Helper.date_iso8601_to_string(value)
              value.nil? ? nil : value.strftime('%Y-%m-%d')
            end

            def Helper.date_time_iso8601_to_string(value)
              value.nil? ? nil : value.strftime('%Y-%m-%dT%H:%M:%S%z')
            end

            TRUE_STRINGS = ['t', 'true', 'y', 'yes', 'on', '1', 'trueclass'] unless defined?(TRUE_STRINGS)
            FALSE_STRINGS = ['f', 'false', 'n', 'no', 'off', '0', 'falseclass'] unless defined?(FALSE_STRINGS)

            def Helper.to_boolean(field_name, value)
              string = value.to_s.strip.downcase
              if TRUE_STRINGS.include?(string)
                true
              elsif FALSE_STRINGS.include?(string)
                false
              elsif string != ""
                raise PreconditionException.new("Unsupported boolean value[#{string}]. For true, must be one of: #{TRUE_STRINGS.inspect}. For false, must be one of: #{FALSE_STRINGS.inspect}")
              else
                nil
              end
            end

          end

        end
      end
    end
  end
end